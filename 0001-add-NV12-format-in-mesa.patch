From 6db999f49dff68c655dd5d7b87ddd5e44ca6e575 Mon Sep 17 00:00:00 2001
From: Mingwei Wang <mingwei.wang@intel.com>
Date: Thu, 27 Oct 2016 16:36:04 +0800
Subject: [PATCH] add NV12 format in mesa

Change-Id: Ifae49e5020b4a3fa08fb6c0dfb3829b66c836416
Co-authored-by: Zhifang Long <zhifang.long@intel.com>
Signed-off-by: Mingwei Wang <mingwei.wang@intel.com>
---
 include/GL/internal/dri_interface.h     |  1 +
 src/egl/drivers/dri2/platform_android.c | 99 ++++++++++++++++++++++++---------
 2 files changed, 74 insertions(+), 26 deletions(-)

diff --git a/include/GL/internal/dri_interface.h b/include/GL/internal/dri_interface.h
index c6ea464..ffe44a3 100644
--- a/include/GL/internal/dri_interface.h
+++ b/include/GL/internal/dri_interface.h
@@ -1202,6 +1202,7 @@ struct __DRIdri2ExtensionRec {
 #define __DRI_IMAGE_FOURCC_YUV422	0x36315559
 #define __DRI_IMAGE_FOURCC_YUV444	0x34325559
 #define __DRI_IMAGE_FOURCC_NV12		0x3231564e
+#define __DRI_IMAGE_FOURCC_NV21     0x3132564e
 #define __DRI_IMAGE_FOURCC_NV16		0x3631564e
 #define __DRI_IMAGE_FOURCC_YUYV		0x56595559
 
diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index ec52a02..9ee202f 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -43,6 +43,11 @@
 
 #define ALIGN(val, align)	(((val) + (align) - 1) & ~((align) - 1))
 
+enum {
+   HAL_PIXEL_FORMAT_DRM_NV12 = 0x102,
+   HAL_PIXEL_FORMAT_DRM_NV12_Y_TILED = 0x103,
+};
+
 static int
 get_format_bpp(int native)
 {
@@ -61,6 +66,9 @@ get_format_bpp(int native)
       bpp = 2;
       break;
    case HAL_PIXEL_FORMAT_YV12:
+   case HAL_PIXEL_FORMAT_YCrCb_420_SP:   /* NV21 */
+   case HAL_PIXEL_FORMAT_DRM_NV12:
+   case HAL_PIXEL_FORMAT_DRM_NV12_Y_TILED:
       bpp = 1;
       break;
    default:
@@ -80,6 +88,10 @@ static int get_fourcc(int native)
    case HAL_PIXEL_FORMAT_RGBA_8888: return __DRI_IMAGE_FOURCC_ABGR8888;
    case HAL_PIXEL_FORMAT_RGBX_8888: return __DRI_IMAGE_FOURCC_XBGR8888;
    case HAL_PIXEL_FORMAT_YV12:      return __DRI_IMAGE_FOURCC_YVU420;
+   case HAL_PIXEL_FORMAT_YCrCb_420_SP:  return __DRI_IMAGE_FOURCC_NV21;
+   case HAL_PIXEL_FORMAT_DRM_NV12:  return __DRI_IMAGE_FOURCC_NV12;
+   case HAL_PIXEL_FORMAT_DRM_NV12_Y_TILED:  return __DRI_IMAGE_FOURCC_NV12;
+
    default:
       _eglLog(_EGL_WARNING, "unsupported native buffer format 0x%x", native);
    }
@@ -93,6 +105,10 @@ static int get_format(int format)
    case HAL_PIXEL_FORMAT_RGB_565:   return __DRI_IMAGE_FORMAT_RGB565;
    case HAL_PIXEL_FORMAT_RGBA_8888: return __DRI_IMAGE_FORMAT_ABGR8888;
    case HAL_PIXEL_FORMAT_RGBX_8888: return __DRI_IMAGE_FORMAT_XBGR8888;
+   case HAL_PIXEL_FORMAT_YV12:      return __DRI_IMAGE_FOURCC_YVU420;
+   case HAL_PIXEL_FORMAT_YCrCb_420_SP:  return __DRI_IMAGE_FOURCC_NV21;
+   case HAL_PIXEL_FORMAT_DRM_NV12:  return __DRI_IMAGE_FOURCC_NV12;
+   case HAL_PIXEL_FORMAT_DRM_NV12_Y_TILED:  return __DRI_IMAGE_FOURCC_NV12;
    case HAL_PIXEL_FORMAT_RGB_888:
       /* unsupported */
    default:
@@ -487,8 +503,10 @@ static _EGLImage *
 droid_create_image_from_prime_fd(_EGLDisplay *disp, _EGLContext *ctx,
                                  struct ANativeWindowBuffer *buf, int fd)
 {
+   unsigned int total_planes = 1;
    unsigned int offsets[3] = { 0, 0, 0 };
    unsigned int pitches[3] = { 0, 0, 0 };
+   int p, index, align_height;
 
    const int fourcc = get_fourcc(buf->format);
    if (fourcc == -1) {
@@ -511,36 +529,65 @@ droid_create_image_from_prime_fd(_EGLDisplay *disp, _EGLContext *ctx,
       /* Cb plane is located after Cr plane */
       offsets[2] = offsets[1] + pitches[1] * buf->height / 2;
       pitches[2] = pitches[1];
-
-      const EGLint attr_list_yv12[] = {
-         EGL_WIDTH, buf->width,
-         EGL_HEIGHT, buf->height,
-         EGL_LINUX_DRM_FOURCC_EXT, fourcc,
-         EGL_DMA_BUF_PLANE0_FD_EXT, fd,
-         EGL_DMA_BUF_PLANE0_PITCH_EXT, pitches[0],
-         EGL_DMA_BUF_PLANE0_OFFSET_EXT, offsets[0],
-         EGL_DMA_BUF_PLANE1_FD_EXT, fd,
-         EGL_DMA_BUF_PLANE1_PITCH_EXT, pitches[1],
-         EGL_DMA_BUF_PLANE1_OFFSET_EXT, offsets[1],
-         EGL_DMA_BUF_PLANE2_FD_EXT, fd,
-         EGL_DMA_BUF_PLANE2_PITCH_EXT, pitches[2],
-         EGL_DMA_BUF_PLANE2_OFFSET_EXT, offsets[2],
-         EGL_NONE, 0
-      };
-
-      return dri2_create_image_dma_buf(disp, ctx, NULL, attr_list_yv12);
+      total_planes = 3;
+      break; 
+
+   case HAL_PIXEL_FORMAT_YCrCb_420_SP:   /* Note : NV21 is not supported in intel_create_image_from_dma_bufs now */
+   case HAL_PIXEL_FORMAT_DRM_NV12:
+       offsets[1] = offsets[0] + pitches[0] * buf->height;
+       pitches[1] = ALIGN(pitches[0], 16); /* FIXME : aligment is 32 or 16 ? */
+       total_planes = 2;
+       break;
+   case HAL_PIXEL_FORMAT_DRM_NV12_Y_TILED:
+       align_height = ALIGN(buf->height, 64);
+       pitches[0] = ALIGN(pitches[0], 128);
+       offsets[1] = offsets[0] + pitches[0] * align_height;
+       pitches[1] = ALIGN(pitches[0], 128);
+       total_planes = 2;
+       break;
+   default:
+       break;
    }
 
-   const EGLint attr_list[] = {
-      EGL_WIDTH, buf->width,
-      EGL_HEIGHT, buf->height,
-      EGL_LINUX_DRM_FOURCC_EXT, fourcc,
-      EGL_DMA_BUF_PLANE0_FD_EXT, fd,
-      EGL_DMA_BUF_PLANE0_PITCH_EXT, pitches[0],
-      EGL_DMA_BUF_PLANE0_OFFSET_EXT, 0,
-      EGL_NONE, 0
+   EGLint plane_fd_attr[] = {
+       EGL_DMA_BUF_PLANE0_FD_EXT,
+       EGL_DMA_BUF_PLANE1_FD_EXT,
+       EGL_DMA_BUF_PLANE2_FD_EXT,
+   };
+
+   EGLint plane_pitch_attr[] = {
+       EGL_DMA_BUF_PLANE0_PITCH_EXT,
+       EGL_DMA_BUF_PLANE1_PITCH_EXT,
+       EGL_DMA_BUF_PLANE2_PITCH_EXT,
+   };
+
+   EGLint plane_offset_attr[] = {
+       EGL_DMA_BUF_PLANE0_OFFSET_EXT,
+       EGL_DMA_BUF_PLANE1_OFFSET_EXT,
+       EGL_DMA_BUF_PLANE2_OFFSET_EXT,
    };
 
+   EGLint attr_list[32];
+   index = 0;
+   attr_list[index++] = EGL_WIDTH;
+   attr_list[index++] = buf->width;
+   attr_list[index++] = EGL_HEIGHT;
+   attr_list[index++] = buf->height;
+   attr_list[index++] = EGL_LINUX_DRM_FOURCC_EXT;
+   attr_list[index++] = fourcc;
+
+   for (p = 0; p < total_planes; p++) {
+       attr_list[index++] = plane_fd_attr[p];
+       attr_list[index++] = fd;
+       attr_list[index++] = plane_pitch_attr[p];
+       attr_list[index++] = pitches[p];
+       attr_list[index++] = plane_offset_attr[p];
+       attr_list[index++] = offsets[p];
+   }
+
+   attr_list[index++] = EGL_NONE;
+
+
    return dri2_create_image_dma_buf(disp, ctx, NULL, attr_list);
 }
 
-- 
1.9.1

